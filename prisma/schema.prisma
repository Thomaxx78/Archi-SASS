// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    firstName     String?
    lastName      String?
    description   String?   @db.Text
    email         String?   @unique
    password         String?
    emailVerified    DateTime?
    emailToken       String?   @unique
    emailTokenExpiry DateTime?
    resetPasswordToken       String?   @unique
    resetPasswordTokenExpiry DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    events        Event[]
    subscription  Subscription?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Gestion des abonnements Stripe
model Subscription {
    id               String   @id @default(cuid())
    userId           String   @unique
    stripeCustomerId String   @unique
    stripePriceId    String?
    status           String   // active, canceled, past_due, etc.
    currentPeriodEnd DateTime?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Événements
model Event {
    id          String   @id @default(cuid())
    title       String
    description String?  @db.Text
    startDate   DateTime
    endDate     DateTime?
    location    String?
    status      EventStatus @default(DRAFT)
    shareToken  String   @unique @default(cuid()) // Pour le lien public
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    invitations Invitation[]

    @@index([createdById])
    @@index([startDate])
}

// Invitations aux événements
model Invitation {
    id       String @id @default(cuid())
    eventId  String
    email    String
    name     String?
    role     InvitationRole @default(PARTICIPANT)
    status   InvitationStatus @default(PENDING)
    sentAt   DateTime @default(now())

    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    responses Response[]

    @@unique([eventId, email])
    @@index([eventId])
}

// Réponses RSVP
model Response {
    id           String @id @default(cuid())
    invitationId String
    response     ResponseType
    comment      String?
    respondedAt  DateTime @default(now())

    invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

    @@index([invitationId])
}

// Enums
enum EventStatus {
    DRAFT
    PUBLISHED
    CANCELLED
    COMPLETED
}

enum InvitationRole {
    ORGANIZER
    PARTICIPANT
}

enum InvitationStatus {
    PENDING
    SENT
    BOUNCED
}

enum ResponseType {
    YES
    NO
    MAYBE
}
